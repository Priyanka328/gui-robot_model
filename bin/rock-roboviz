#! /usr/bin/env ruby

require 'vizkit'
require 'optparse'

def try_to_get_task(task_name, retry_on_error=true)
    task = nil
    begin
        task = Orocos.name_service.get task_name
    rescue Exception => e
        if retry_on_error
            puts "Did not find task context '#{task_name}'. Will retry in a second."
            sleep(1)
            return try_to_get_task(task_name)
        else
            return nil
        end
    end
    return task
end

@state_task_name = Array.new
@state_port_name = Array.new
use_test_gui = true
mode_optimize = false
simplify = nil
smooth = false
parallel = 1
hostname = nil
options = OptionParser.new do |opt|
    opt.banner = <<-EOD
rock-roboviz [options] /path/to/model/file
  Opens a UI that allows to either display a model file (offline),
  or display the state of a model based on joint data from a port (with
  --joint-state-port)

  If --joint-state-port is not given, a UI window is started to allow changing
  the joint values. Use --no-joint-gui to disable

  See the Display Options section below for an option description

rock-roboviz --optimize-meshes [options] FILES
  Create optimized osgb files from other mesh files in a way that the robot
  model visualization would load automatically. This speeds up loading
  significantly, and allows to do more expensive passes - such as simplification
  and smoothing.

  See the Optimization Options section below for an option description
    EOD
    opt.separator "\nDisplay Options"
    opt.on '--no-test-gui', 'disable the test GUI if no task context has been given' do
        use_test_gui = false
    end
    opt.on '--host=HOSTNAME', String, 'the host we should contact to find RTT tasks' do |host|
        hostname = host
    end
    opt.on '--joint_state_port=TASK_CONTEXT_NAME:PORT_NAME', '-s=TASK_CONTEXT_NAME:PORT_NAME' , "Use joint state port of task TASK_CONTEXT_NAME to read data from" do |val|
        puts "Will take port '#{val}' for reading state from"
        splitted = val.split(':')
        if splitted.size != 2
            raise("Definition of command port must follow the pattern 'TASK_CONTEXT_NAME:PORT_NAME'. Example: --joint_command_port=my_task:the_port")
        end
        @state_task_name.push( splitted[0] )
        @state_port_name.push( splitted[1] )
    end
    opt.separator "\nOptimization Options"
    opt.on '--optimize-meshes' do
        mode_optimize = true
    end
    opt.on '--simplify[=VALUE]', Float, 'normalized simplification factor, 0.5 will produce a 50% reduced model. If no value is given, it defaults to the OSG default of 1' do |value|
        simplify = value || 0.5
    end
    opt.on '--smooth', 'whether the model should be smoothed (default is not)' do
        smooth = true
    end
    opt.on '--threads=N', Integer, 'how many parallel threads can be run to process the files' do |value|
        parallel = value
    end
    opt.on '--help', 'this help message' do
        puts opt
        exit 0
    end
end

args = options.parse(ARGV)

class ConversionFailed < RuntimeError; end
if mode_optimize
    queue = Queue.new
    env = Hash[
        'OSG_OPTIMIZER' => 'INDEX_MASH STATIC_OBJECT_DETECTION VERTEX_POSTTRANSFORM',
        'OSG_NOTIFY_LEVEL' => 'WARN'
    ]
    osgconv_args = []
    if smooth
        osgconv_args << '--smooth'
    end
    if simplify
        osgconv_args << "--simplify" << simplify.to_s
    end
    args.each { |file| queue << file }
    threads = (0...parallel).map do
        Thread.new do
            while !queue.empty?
                file = queue.pop
                if !system(env, "osgconv", *osgconv_args, file, "#{file}.osgb")
                    raise ConversionFailed, "conversion of #{file} failed"
                end
            end
            nil
        end
    end
    has_error = false
    threads.each do |t|
        begin t.value
        rescue ConversionFailed => e
            has_error = true
            STDERR.puts e.message
        end
    end
    if has_error
        exit 0
    else
        exit 1
    end
end

model_file = args.shift

if !model_file
    puts "missing model file argument"
    puts options
    exit 1
end

if not @state_task_name.empty?
    if hostname
        Orocos::CORBA.name_service.ip = hostname
    end
    Orocos.initialize
end

view3d = Vizkit.vizkit3d_widget
view3d.show
vis_gui = Vizkit.default_loader.RobotVisualization
vis_gui.modelFile = model_file.dup

if not @state_task_name.empty?
    @state_task_name.each_with_index do | task_name, index | 
        control = try_to_get_task(task_name, true)

        port = nil
        if @state_port_name[index]
            port = control.port(@state_port_name[index] )
        else
            #find joint state port
            matching_ports = control.ports.find_all {|p| p.is_a? Orocos::OutputPort and p.type == Types::Base::Samples::Joints}
            if matching_ports.size > 1
                puts "Multiple joint state producer ports. Don't know which to use."
                matching_ports.each do |p| puts p.name end
                exit 1
            end
            if matching_ports.size < 1 
                puts "No joint state producer port available."
                exit 1
            end
            port = matching_ports[0]
        end 

        port.connect_to do |data|
            vis_gui.updateData(data)
        end
    end

elsif use_test_gui
    main = Qt::Widget.new
    layout = Qt::VBoxLayout.new(main)
    splitter = Qt::Splitter.new(main)
    layout.add_widget splitter
    splitter.setOrientation(Qt::Vertical)
    splitter.add_widget(view3d)

    ctrl_gui = Vizkit.default_loader.ControlUi
    override_vel_limits=0
    only_positive=true
    no_effort=true
    no_velocity=true
    ctrl_gui.configureUi(override_vel_limits, only_positive, no_effort, no_velocity)
    ctrl_gui.initFromURDF(model_file.dup)
    ctrl_gui.connect(SIGNAL('sendSignal()')) do 
        sample = ctrl_gui.getJoints()
        vis_gui.updateData(sample)
    end
    splitter.add_widget ctrl_gui
    main.show
end

Vizkit.exec


